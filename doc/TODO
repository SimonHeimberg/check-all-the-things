Things found on
<https://wiki.debian.org/HowToPackageForDebian#Check_points_for_any_package>
but not included here yet::

   find ! -type d | xargs file  | grep ': *ELF ' | sed 's/: +*.*//' | xargs --no-run-if-empty eu-elflint --quiet --gnu-ld --strict
   grep -r 'PATH' .
   grep -r 'x86_64-linux-gnu' .

Places to find new checks:

apt-file search --regex 'bin/.*(lint|check|valid|tidy)'
apt-cache search --names-only '(lint|check|valid|tidy)'
https://github.com/scrooloose/syntastic/tree/master/syntax_checkers
https://git.fedorahosted.org/cgit/FedoraReview.git
https://github.com/michenriksen/gitrob/blob/master/patterns.json
https://registry.hub.docker.com/repos/codeclimate/
https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis#C.2FC.2B.2B
https://github.com/mcandre/linters
https://gitlab.com/linted/linted/tree/master/scripts
http://docs.codacy.com/docs/special-thanks
https://github.com/linuxfoundation/cii-best-practices-badge/blob/master/doc/criteria.md#user-content-analysis

Digest this document and come up with some tests:

http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html

Things that need defining:

   ruby-yaml-parser
   js-yaml
   xml-entity-crap
   json-eval

Add checkers from the git-vogue tool:

https://github.com/anchor/git-vogue

Add some checkers from these guidelines:

https://www.securecoding.cert.org/confluence/display/seccode/CERT+C+Coding+Standard

Suggest some tools:

http://s2e.epfl.ch/
https://klee.github.io/

Wildcards is not always an adequate mechanisms for detecting file types. Think
of Python or Perl scripts without extensions, or ELF binaries.

Add descriptions

Add a suggestion to run manual/interactive tools:

https://cseweb.ucsd.edu/~jvoung/race/
https://github.com/OpenRCE/sulley

Only inform about a skipped check if there were actually matching files.

A mechanism to specify the amount/pedanticness of the output.

A way to print available checks, flags and groups

make the fields multivalued

check for URLs

Blockers for uploading to Debian unstable:

Define which stage of the build each check runs from.

Add an option to control the verbosity of various commands.

Add options for disabling checks based on load etc.

Add support for checks to declare mime types they should be run on.

Add support for passing the post-build commands into sbuild/pbuilder.

Add support for truncating the output of checks with lots of output.

Support for running different checks on older distros.

- run commands according to mimetype of the files - xdg-mime
- show comments on fixme items
- list checks
- false-positives
- output verbosity
- ftpmasters checks??
- print coverage
- check files in parent directory too using ../*

Maybe suggest interactive helpers

- syntastic (vim plugin)
- develock-el (emacs minor mode, e.g. for highlighting overlong code lines, tabs vs spaces, etc.)
- emacs-goodies-el (many small helpers that highlight common issues)

.. vim:ts=3 sw=3 et ft=rst
